import java.time.Instant

plugins {
    id("net.minecraftforge.gradle") version "[6.0,6.2)"
    id("org.spongepowered.mixin") version "0.7-SNAPSHOT"
    id("org.parchmentmc.librarian.forgegradle") version "1.+"
}

version = "0.2.2+1.20.1" // https://semver.org/
group = "com.lightning.northstar" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//archivesBaseName = "northstar"

// Include resources generated by data generators.
sourceSets.main {
    resources.srcDir("src/generated/resources")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven("https://modmaven.dev/")
    maven("https://maven.tterrag.com/")
    maven("https://maven.createmod.net")
    maven("https://raw.githubusercontent.com/Fuzss/modresources/main/maven/") // Ponder
    maven("https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/") // GeckoLib
    maven("https://maven.blamejared.com/") // JEI

    flatDir {
        dir("run/mods-obf") // extra mods for testing, files must be named "<name without dashes>-1.20.1.jar"
    }
}

dependencies {
    minecraft("net.minecraftforge:forge:1.20.1-47.4.0")
    annotationProcessor("org.spongepowered:mixin:0.8.5:processor")

    // TODO: regroup versions in a separate place
    implementation(fg.deobf("com.simibubi.create:create-1.20.1:6.0.6-205:slim"))
    implementation(fg.deobf("net.createmod.ponder:Ponder-Forge-1.20.1:1.0.83"))
    implementation(fg.deobf("com.tterrag.registrate:Registrate:MC1.20-1.3.3"))
    implementation(fg.deobf("dev.engine-room.flywheel:flywheel-forge-api-1.20.1:1.0.0-beta-193"))
    implementation(fg.deobf("software.bernie.geckolib:geckolib-forge-1.20.1:4.7.2"))
    implementation(fg.deobf("mezz.jei:jei-1.20.1-forge:15.20.0.112"))

    runtimeOnly(fg.deobf("dev.engine-room.flywheel:flywheel-forge-1.20.1:1.0.0-beta-193"))
    runtimeOnly(fg.deobf("io.github.llamalad7:mixinextras-forge:0.4.1"))

    file("run/mods-obf").listFiles()?.forEach {
        runtimeOnly(fg.deobf("local:${it.nameWithoutExtension.replace("-1.20.1", "")}:1.20.1"))
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile::class) {
        options.compilerArgs.addAll(arrayOf("-Xmaxerrs", "10000"))
    }
}

minecraft {
    //mappings("official", "1.20.1")
    mappings("parchment", "2023.09.03-1.20.1")

    // accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg") // Currently, this location cannot be changed from the default.

    runs {
        create("client") {
            workingDirectory(project.file("run"))

            properties(mapOf(
                "forge.logging.workers" to "REGISTRIES",

                "forge.logging.console.level" to "debug",
                "mixin.env.remapRefMap" to "true",
                "mixin.env.refMapRemappingFile" to "${projectDir}/build/createSrgToMcp/output.srg",

                "forge.enabledGameTestNamespaces" to "northstar",
            ))

            args("-mixin.config=northstar.mixins.json")

            /*mods {
                "northstar" {
                    source(sourceSets.main.get())
                }
            }*/
        }
        create("server") {
            workingDirectory(project.file("run"))

            properties(mapOf(
                "forge.logging.markers" to "REGISTRIES",

                "forge.logging.console.level" to "debug",
                "mixin.env.remapRefMap" to "true",
                "mixin.env.refMapRemappingFile" to "${projectDir}/build/createSrgToMcp/output.srg",

                "forge.enabledGameTestNamespaces" to "northstar",
            ))

            /*mods {
                "northstar" {
                    source(sourceSets.main.get())
                }
            }*/
        }
    }

    /*runs {
        data {
            workingDirectory project . file ("run")

            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args "--mod", "northstar", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")

            mods {
                northstar {
                    source sourceSets . main
                }
            }
        }
    }*/
}

mixin {
    add(sourceSets.main.get(), "northstar.refmap.json")
    config("northstar.mixins.json")
}

tasks.jar {
    finalizedBy("reobfJar")

    manifest {
        attributes(mapOf(
            "Specification-Title"      to "northstar",
            "Specification-Vendor"     to "Redstonneur1256",
            "Specification-Version"    to version,
            "Implementation-Title"     to project.name,
            "Implementation-Version"   to version,
            "Implementation-Vendor"    to "Redstonneur1256",
            "Implementation-Timestamp" to Instant.now().toString()
        ))
    }
}

tasks.processResources {
    val buildProps = project.properties.toMutableMap()
    buildProps["file"] = mapOf("jarVersion" to project.version)
    filesMatching(listOf("META-INF/mods.toml")) {
        expand(buildProps)
    }
}

tasks.withType<JavaCompile> {
    options.encoding = "UTF-8"
}
